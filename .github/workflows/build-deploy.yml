name: Build && Deploy

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [x64, ia32, arm64, arm]
        include:
          - os: ubuntu-latest
            arch: x64
            apt-arch: amd64
          - os: ubuntu-latest
            arch: arm64
            apt-arch: arm64
            toolchain-arch: aarch64
          - os: ubuntu-latest
            arch: arm
            apt-arch: armhf
            toolchain-arch: arm
        exclude:
          - os: windows-latest
            arch: arm
          - os: ubuntu-latest
            arch: ia32
          - os: macos-latest
            arch: ia32
          - os: macos-latest
            arch: arm
        # config:
          # - { name: "Windows (x64)", os: windows-latest, arch: "x64" }
          # - { name: "Windows (IA32)", os: windows-latest, arch: "ia32" }
          # - { name: "Ubuntu (x64)", os: ubuntu-latest, arch: "x64", apt-arch: "amd64" }
          # - { name: "Ubuntu (ARM64)", os: ubuntu-latest, arch: "arm64", toolchain-arch: "aarch64", apt-arch: "arm64" }
          # - { name: "macOS (x64)", os: macos-latest, arch: "x64" }
          # - { name: "macOS (ARM64)", os: macos-latest, arch: "arm64" }

    env:
      CC: "${{ matrix.toolchain-arch && format('{0}-linux-gnu-gcc', matrix.toolchain-arch) || '' }}"
      CXX: "${{ matrix.toolchain-arch && format('{0}-linux-gnu-g++', matrix.toolchain-arch) || '' }}"

    steps:
      - name: Check-Out Code
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Setup CMake/Ninja
        uses: lukka/get-cmake@latest

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - name: Install Cross-Build Toolchain
        uses: awalsh128/cache-apt-pkgs-action@latest
        if: ${{ runner.os == 'Linux' && matrix.arch != 'x64' }}
        with:
          packages: crossbuild-essential-${{ matrix.apt-arch }}
          version: 1.0

      - name: Prepare Machine For Cross-Build
        if: ${{ runner.os == 'Linux' && matrix.arch != 'x64' }}
        run: |
          sudo dpkg --add-architecture ${{ matrix.apt-arch }}
          sudo sed -i 's#http://azure.archive.ubuntu.com/ubuntu#[arch=${{ matrix.apt-arch }}] http://ports.ubuntu.com/ubuntu-ports#g' /etc/apt/sources.list
          sudo apt-get update -yq

      - name: Install External Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get install libasound2:${{ matrix.apt-arch }} libasound2-dev:${{ matrix.apt-arch }} libpulse-dev:${{ matrix.apt-arch }}

      - name: Install Audify Dependencies
        run: npm ci --ignore-scripts

      - name: Build Audify
        run: npm run rebuild -- --arch ${{ matrix.arch }}

      # - name: Build Audify Prebuilt Binaries
      #   run: npm run build-binaries -- -- -- --arch ${{ matrix.arch }}
